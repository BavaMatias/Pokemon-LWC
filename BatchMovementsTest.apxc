@istest
public class BatchMovementsTest {
    @istest 
    public static void batchTest(){
        Test.setMock(HttpCalloutMock.class, new BatchMovementsMock());
        Test.startTest();
        List<Integer> startList = new List<Integer>();
		startList.add(1);
		BatchMovements batch = new BatchMovements(startList);
        database.executeBatch(batch, 1);
        test.stopTest();
        
        Movimiento__c movimiento = [SELECT Name, Chance_de_Efecto__c, Efecto__c, ExtId__c, Objetivo__c, Poder__c, Pp__c, Prioridad__c, Punteria__c, Tipo__c 
                                     FROM Movimiento__c];
        system.assertEquals('pound', movimiento.Name);
        system.assertEquals(20, movimiento.Chance_de_Efecto__c);
        system.assertEquals('Inflicts regular damage with no additional effect.', movimiento.Efecto__c);
        system.assertEquals(1, movimiento.ExtId__c);
        system.assertEquals('selected-pokemon', movimiento.Objetivo__c);
        system.assertEquals(40, movimiento.Poder__c);
        system.assertEquals(35, movimiento.Pp__c);
        system.assertEquals('0', movimiento.Prioridad__c);
        system.assertEquals(100, movimiento.Punteria__c);
        system.assertEquals('Normal', movimiento.Tipo__c);
        
    }
    
    @istest
    public static void batchTestNull(){
        Test.setMock(HttpCalloutMock.class, new NullMock());
        Test.startTest();
        List<Integer> startList = new List<Integer>();
		startList.add(1);
		BatchMovements batch = new BatchMovements(startList);
        database.executeBatch(batch, 1);
        Test.stopTest();
        
        Movimiento__c movimiento = [SELECT Name, Chance_de_Efecto__c, Efecto__c, ExtId__c, Objetivo__c, Poder__c, Pp__c, Prioridad__c, Punteria__c, Tipo__c 
                                     FROM Movimiento__c];
        system.assertEquals(0, movimiento.Chance_de_Efecto__c);
        system.assertEquals(0, movimiento.Punteria__c);
        system.assertEquals(0, movimiento.Poder__c);        
    }
}